#!/usr/bin/env python2

import argparse, logging
import os, os.path
import guestfs

loglevel = 'warn'
loglevels = { 'debug' : logging.DEBUG,
              'info' : logging.INFO,
              'warn' : logging.WARNING}

class ParseLoglevel(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(ParseLoglevel, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        loglevel = self.parse_loglevel(values)
        setattr(namespace, self.dest, loglevel)
    def parse_loglevel(self, loglevel_string):
        try:
            return loglevels[loglevel_string]
        except:
            msg = '{} is not a supported loglevel'.format(loglevel_string)
            raise argparse.ArgumentTypeError(msg)

parser = argparse.ArgumentParser(description='Add your SSH public keys to a user on a virtual machine disk')
parser.add_argument('image', metavar='DISK_IMAGE', type=str, help='Name of the target disk image')
parser.add_argument('-l','--loglevel', help='Log message verbosity', default='warn', choices=loglevels, action=ParseLoglevel)

args = parser.parse_args()

cwd = os.getcwd()
log = logging.getLogger(__name__)
log.addHandler(logging.StreamHandler())
log.setLevel(args.loglevel)
log.debug('cwd %s', cwd)

image_path = os.path.normpath(os.path.join(cwd,args.image))
if not os.path.isfile(image_path):
    log.error('Image %s does not exists, is not accessible or not a regular file', image_path)
    exit(1)

log.info('Modifying image %s', image_path)

gfs = guestfs.GuestFS(python_return_dict=True)

gfs.add_drive(args.image)
gfs.launch()
gfs.mount("/dev/sda2","/")
