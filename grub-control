#!/usr/bin/env python

import argparse, logging
from vm_common import GuestFSDisk
from enum import IntEnum

class AugOption(IntEnum):
    AUG_SAVE_BACKUP = 1
    AUG_SAVE_NEWFILE = 2
    AUG_TYPE_CHECK = 4
    AUG_NO_STDINC = 8
    AUG_SAVE_NOOP = 16
    AUG_NO_LOAD = 32

class Configurator:
    def __init__(self):
        self.log = logging.getLogger(__name__)
        self.log.setLevel(logging.DEBUG)
        self.log.addHandler(logging.StreamHandler())

        self.parser = argparse.ArgumentParser(description='Alter GRUB2 options inside virtual machine image')
        self.parser.add_argument('disk_image', help='Name of disk image file to alter')
        self.parser.add_argument('-t', '--timeout', type=int, help='Set boot timeout in seconds,' \
                ' in case of VMs it\'s handy to set it to 0', default=0)
        self.parser.add_argument('-g', '--gfx-mode', help='GFX_MODE for the console, e.g.' \
                ' \'1024x768\' or \'800x600\' (without quotes)')

        self.args = self.parser.parse_args()
        self.log.debug('[%s] parsed command line arguments %s', self.__class__.__name__, self.args)

        self.disk_image = self.args.disk_image
        self.timeout = self.args.timeout

def set_timeout(gfs_disk, timeout, log):
    gfs_disk.gfs.aug_init('/',AugOption.AUG_SAVE_BACKUP)
    log.info('[GUEST] current GRUB_TIMEOUT value is %s', gfs_disk.gfs.aug_get('/files/etc/default/grub/GRUB_TIMEOUT'))

    gfs_disk.gfs.aug_set('/files/etc/default/grub/GRUB_TIMEOUT ', str(timeout))
    gfs_disk.gfs.aug_save()

    log.info('[GUEST] new GRUB_TIMEOUT value is %s', gfs_disk.gfs.aug_get('/files/etc/default/grub/GRUB_TIMEOUT'))

    grub_mkconfig = gfs_disk.get_executable_path('grub2-mkconfig')
    log.debug('[GUEST:%s] path to executable %s is %s', __name__, 'grub2-mkconfig', grub_mkconfig)

    output = gfs_disk.gfs.command(['grub2-mkconfig','-o','/boot/grub2/grub.cfg'])
    log.debug('[GUEST:%s] command output: %s', grub_mkconfig, output)

config = Configurator()

disk = GuestFSDisk(config.disk_image, config.log)

set_timeout(disk, config.timeout, config.log)
